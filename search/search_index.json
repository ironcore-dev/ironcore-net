{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ironcore-net Documentation","text":"<p>This page contains the documentation of the ironcore-net project which is part  of the ironcore-dev organization.</p>"},{"location":"api-reference/core/","title":"Core","text":"<p>Packages:</p> <ul> <li> core.apinet.ironcore.dev/v1alpha1 </li> </ul>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1","title":"core.apinet.ironcore.dev/v1alpha1","text":"<p>Package v1alpha1 is the v1alpha1 version of the API.</p> <p>Resource Types:</p> <ul><li> DaemonSet </li><li> IP </li><li> IPAddress </li><li> Instance </li><li> LoadBalancer </li><li> LoadBalancerRouting </li><li> NATGateway </li><li> NATGatewayAutoscaler </li><li> NATTable </li><li> Network </li><li> NetworkID </li><li> NetworkInterface </li><li> NetworkPolicy </li><li> NetworkPolicyRule </li><li> Node </li></ul>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.DaemonSet","title":"DaemonSet","text":"<p>DaemonSet is the schema for the daemonsets API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>DaemonSet</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  DaemonSetSpec  <code>nodeSelector</code>  Kubernetes meta/v1.LabelSelector  <p>Selector selects all Instance that are managed by this daemon set.</p> <code>template</code>  InstanceTemplate  <p>Template is the instance template.</p> <code>status</code>  DaemonSetStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IP","title":"IP","text":"<p>IP is the schema for the ips API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>IP</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  IPSpec  <code>type</code>  IPType  <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <code>claimRef</code>  IPClaimRef  <code>status</code>  IPStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPAddress","title":"IPAddress","text":"<p>IPAddress is the schema for the ipaddresses API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>IPAddress</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  IPAddressSpec  <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <code>claimRef</code>  IPAddressClaimRef"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.Instance","title":"Instance","text":"<p>Instance is the schema for the instances API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>Instance</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  InstanceSpec  <code>type</code>  InstanceType  <p>Type specifies the InstanceType to deploy.</p> <code>loadBalancerType</code>  LoadBalancerType  <p>LoadBalancerType is the load balancer type this instance is for.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network the instance is on.</p> <code>ips</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IPs are the IPs of the instance.</p> <code>loadBalancerPorts</code>  []LoadBalancerPort  <p>LoadBalancerPorts are the load balancer ports of this instance.</p> <code>affinity</code>  Affinity  <p>Affinity are affinity constraints.</p> <code>topologySpreadConstraints</code>  []TopologySpreadConstraint  <p>TopologySpreadConstraints describes how a group of instances ought to spread across topology domains. Scheduler will schedule instances in a way which abides by the constraints. All topologySpreadConstraints are ANDed.</p> <code>nodeRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NodeRef references the node hosting the load balancer instance. Will be set by the scheduler if empty.</p> <code>status</code>  InstanceStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancer","title":"LoadBalancer","text":"<p>LoadBalancer is the schema for the loadbalancers API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>LoadBalancer</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  LoadBalancerSpec  <code>type</code>  LoadBalancerType  <p>Type specifies the type of load balancer.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network the load balancer is part of.</p> <code>ips</code>  []LoadBalancerIP  (Optional) <p>IPs specifies the IPs of the load balancer.</p> <code>ports</code>  []LoadBalancerPort  <p>Ports are the ports the load balancer should allow. If empty, the load balancer allows all ports.</p> <code>selector</code>  Kubernetes meta/v1.LabelSelector  <p>Selector selects all Instance that are managed by this daemon set.</p> <code>template</code>  InstanceTemplate  <p>Template is the instance template.</p> <code>status</code>  LoadBalancerStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerRouting","title":"LoadBalancerRouting","text":"<p>LoadBalancerRouting is the schema for the loadbalancerroutings API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>LoadBalancerRouting</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>destinations</code>  []LoadBalancerDestination"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATGateway","title":"NATGateway","text":"<p>NATGateway is the schema for the natgateways API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>NATGateway</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  NATGatewaySpec  <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <p>IPFamily is the IP family of the NAT gateway.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network the NAT gateway is part of.</p> <code>ips</code>  []NATGatewayIP  (Optional) <p>IPs specifies the IPs of the NAT gateway.</p> <code>portsPerNetworkInterface</code>  int32  <p>PortsPerNetworkInterface specifies how many ports to allocate per network interface.</p> <code>status</code>  NATGatewayStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATGatewayAutoscaler","title":"NATGatewayAutoscaler","text":"<p>NATGatewayAutoscaler is the schema for the natgatewayautoscalers API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>NATGatewayAutoscaler</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  NATGatewayAutoscalerSpec  <code>natGatewayRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NATGatewayRef points to the target NATGateway to scale.</p> <code>minPublicIPs</code>  int32  <p>MinPublicIPs is the minimum number of public IPs to allocate for a NAT Gateway.</p> <code>maxPublicIPs</code>  int32  <p>MaxPublicIPs is the maximum number of public IPs to allocate for a NAT Gateway.</p> <code>status</code>  NATGatewayAutoscalerStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATTable","title":"NATTable","text":"<p>NATTable is the schema for the nattables API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>NATTable</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>ips</code>  []NATIP  <p>IPs specifies how to NAT the IPs for the NAT gateway.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.Network","title":"Network","text":"<p>Network is the schema for the networks API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>Network</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  NetworkSpec  <code>id</code>  string  <p>ID is the ID of the network.</p> <code>peerings</code>  []NetworkPeering  <p>Peerings are the network peerings with this network</p> <code>status</code>  NetworkStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkID","title":"NetworkID","text":"<p>NetworkID is the schema for the networkids API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>NetworkID</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  NetworkIDSpec  <code>claimRef</code>  NetworkIDClaimRef"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkInterface","title":"NetworkInterface","text":"<p>NetworkInterface is the schema for the networkinterfaces API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>NetworkInterface</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  NetworkInterfaceSpec  <code>nodeRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NodeRef is the node the network interface is hosted on.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network that the network interface is in.</p> <code>ips</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IPs are the internal IPs of the network interface.</p> <code>prefixes</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IPPrefix  <p>Prefixes are additional prefixes to route to the network interface.</p> <code>natGateways</code>  []NetworkInterfaceNAT  <p>NATs specify the NAT of the network interface IP family. Can only be set if there is no matching IP family in PublicIPs.</p> <code>publicIPs</code>  []NetworkInterfacePublicIP  (Optional) <p>PublicIPs are the public IPs the network interface should have.</p> <code>status</code>  NetworkInterfaceStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPolicy","title":"NetworkPolicy","text":"<p>NetworkPolicy is the Schema for the networkpolicies API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>NetworkPolicy</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  NetworkPolicySpec  <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef is the network to regulate using this policy.</p> <code>networkInterfaceSelector</code>  Kubernetes meta/v1.LabelSelector  <p>NetworkInterfaceSelector selects the network interfaces that are subject to this policy.</p> <code>priority</code>  int32  <p>Priority is an optional field that specifies the order in which the policy is applied. Policies with higher \u201corder\u201d are applied after those with lower order.  If the order is omitted, it may be considered to be \u201cinfinite\u201d - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \u201cName\u201d.</p> <code>ingress</code>  []NetworkPolicyIngressRule  <p>Ingress specifies rules for ingress traffic.</p> <code>egress</code>  []NetworkPolicyEgressRule  <p>Egress specifies rules for egress traffic.</p> <code>policyTypes</code>  []PolicyType  <p>PolicyTypes specifies the types of policies this network policy contains.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPolicyRule","title":"NetworkPolicyRule","text":"<p>NetworkPolicyRule is the schema for the networkpolicyrules API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>NetworkPolicyRule</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>networkRef</code>  LocalUIDReference  <p>NetworkRef is the network to which network policy is applied.</p> <code>targets</code>  []TargetNetworkInterface  <p>Targets are the targets of the network policy.</p> <code>priority</code>  int32  <p>Priority is an optional field that specifies the order in which the policy is applied.</p> <code>ingressRule</code>  []Rule  <p>IngressRules are the ingress rules.</p> <code>egressRule</code>  []Rule  <p>EgressRules are the egress rules.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.Node","title":"Node","text":"<p>Node is the schema for the nodes API.</p> Field Description <code>apiVersion</code> string <code> core.apinet.ironcore.dev/v1alpha1 </code> <code>kind</code> string  <code>Node</code> <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  NodeSpec  <code>status</code>  NodeStatus"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.Affinity","title":"Affinity","text":"<p> (Appears on:InstanceSpec) </p> Field Description <code>nodeAffinity</code>  NodeAffinity  <code>instanceAntiAffinity</code>  InstanceAntiAffinity"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.DaemonSetSpec","title":"DaemonSetSpec","text":"<p> (Appears on:DaemonSet) </p> Field Description <code>nodeSelector</code>  Kubernetes meta/v1.LabelSelector  <p>Selector selects all Instance that are managed by this daemon set.</p> <code>template</code>  InstanceTemplate  <p>Template is the instance template.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.DaemonSetStatus","title":"DaemonSetStatus","text":"<p> (Appears on:DaemonSet) </p> Field Description <code>collisionCount</code>  int32"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPAddressClaimRef","title":"IPAddressClaimRef","text":"<p> (Appears on:IPAddressSpec) </p> Field Description <code>group</code>  string  <code>resource</code>  string  <code>namespace</code>  string  <code>name</code>  string  <code>uid</code>  k8s.io/apimachinery/pkg/types.UID"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPAddressSpec","title":"IPAddressSpec","text":"<p> (Appears on:IPAddress) </p> Field Description <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <code>claimRef</code>  IPAddressClaimRef"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPBlock","title":"IPBlock","text":"<p> (Appears on:NetworkPolicyPeer, Rule) </p> <p>IPBlock specifies an ip block with optional exceptions.</p> Field Description <code>cidr</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IPPrefix  <p>CIDR is a string representing the ip block.</p> <code>except</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IPPrefix  <p>Except is a slice of CIDRs that should not be included within the specified CIDR. Values will be rejected if they are outside CIDR.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPClaimRef","title":"IPClaimRef","text":"<p> (Appears on:IPSpec) </p> Field Description <code>group</code>  string  <code>resource</code>  string  <code>name</code>  string  <code>uid</code>  k8s.io/apimachinery/pkg/types.UID"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPSpec","title":"IPSpec","text":"<p> (Appears on:IP) </p> Field Description <code>type</code>  IPType  <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <code>claimRef</code>  IPClaimRef"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPStatus","title":"IPStatus","text":"<p> (Appears on:IP) </p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.IPType","title":"IPType (<code>string</code> alias)","text":"<p> (Appears on:IPSpec) </p> Value Description <p>\"Public\"</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.InstanceAffinityTerm","title":"InstanceAffinityTerm","text":"<p> (Appears on:InstanceAntiAffinity) </p> <p>InstanceAffinityTerm defines a set of instances (namely those matching the labelSelector that this instance should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key  matches that of any node on which a instance of the set of instances is running. Field Description <code>labelSelector</code>  Kubernetes meta/v1.LabelSelector  <p>LabelSelector over a set of resources, in this case instances.</p> <code>topologyKey</code>  string  <p>TopologyKey indicates that this instance should be co-located (affinity) or not co-located (anti-affinity) with the instances matching the labelSelector, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected instances is running. Empty topologyKey is not allowed.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.InstanceAntiAffinity","title":"InstanceAntiAffinity","text":"<p> (Appears on:Affinity) </p> Field Description <code>requiredDuringSchedulingIgnoredDuringExecution</code>  []InstanceAffinityTerm  <p>RequiredDuringSchedulingIgnoredDuringExecution specifies anti-affinity requirements at scheduling time, that, if not met, will cause the instance not be scheduled onto the node. When there are multiple elements, the lists of nodes corresponding to each instanceAffinityTerm are intersected, i.e. all terms must be satisfied.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.InstanceSpec","title":"InstanceSpec","text":"<p> (Appears on:Instance, InstanceTemplate) </p> Field Description <code>type</code>  InstanceType  <p>Type specifies the InstanceType to deploy.</p> <code>loadBalancerType</code>  LoadBalancerType  <p>LoadBalancerType is the load balancer type this instance is for.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network the instance is on.</p> <code>ips</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IPs are the IPs of the instance.</p> <code>loadBalancerPorts</code>  []LoadBalancerPort  <p>LoadBalancerPorts are the load balancer ports of this instance.</p> <code>affinity</code>  Affinity  <p>Affinity are affinity constraints.</p> <code>topologySpreadConstraints</code>  []TopologySpreadConstraint  <p>TopologySpreadConstraints describes how a group of instances ought to spread across topology domains. Scheduler will schedule instances in a way which abides by the constraints. All topologySpreadConstraints are ANDed.</p> <code>nodeRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NodeRef references the node hosting the load balancer instance. Will be set by the scheduler if empty.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.InstanceStatus","title":"InstanceStatus","text":"<p> (Appears on:Instance) </p> Field Description <code>ips</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <code>collisionCount</code>  int32"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.InstanceTemplate","title":"InstanceTemplate","text":"<p> (Appears on:DaemonSetSpec, LoadBalancerSpec) </p> Field Description <code>metadata</code>  Kubernetes meta/v1.ObjectMeta   Refer to the Kubernetes API documentation for the fields of the <code>metadata</code> field.  <code>spec</code>  InstanceSpec  <code>type</code>  InstanceType  <p>Type specifies the InstanceType to deploy.</p> <code>loadBalancerType</code>  LoadBalancerType  <p>LoadBalancerType is the load balancer type this instance is for.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network the instance is on.</p> <code>ips</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IPs are the IPs of the instance.</p> <code>loadBalancerPorts</code>  []LoadBalancerPort  <p>LoadBalancerPorts are the load balancer ports of this instance.</p> <code>affinity</code>  Affinity  <p>Affinity are affinity constraints.</p> <code>topologySpreadConstraints</code>  []TopologySpreadConstraint  <p>TopologySpreadConstraints describes how a group of instances ought to spread across topology domains. Scheduler will schedule instances in a way which abides by the constraints. All topologySpreadConstraints are ANDed.</p> <code>nodeRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NodeRef references the node hosting the load balancer instance. Will be set by the scheduler if empty.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.InstanceType","title":"InstanceType (<code>string</code> alias)","text":"<p> (Appears on:InstanceSpec) </p> Value Description <p>\"LoadBalancer\"</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerDestination","title":"LoadBalancerDestination","text":"<p> (Appears on:LoadBalancerRouting) </p> <p>LoadBalancerDestination is the destination of the load balancer.</p> Field Description <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IP is the target IP.</p> <code>targetRef</code>  LoadBalancerTargetRef  <p>TargetRef is the target providing the destination.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerIP","title":"LoadBalancerIP","text":"<p> (Appears on:LoadBalancerSpec) </p> Field Description <code>name</code>  string  <p>Name is the name of the load balancer IP.</p> <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <p>IPFamily is the IP family of the IP. Has to match IP if specified. If unspecified and IP is specified, will be defaulted by using the IP family of IP. If only IPFamily is specified, a random IP of that family will be allocated if possible.</p> <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IP specifies a specific IP to allocate. If empty, a random IP will be allocated if possible.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerPort","title":"LoadBalancerPort","text":"<p> (Appears on:InstanceSpec, LoadBalancerSpec) </p> Field Description <code>protocol</code>  Kubernetes core/v1.Protocol  <p>Protocol is the protocol the load balancer should allow. If not specified, defaults to TCP.</p> <code>port</code>  int32  <p>Port is the port to allow.</p> <code>endPort</code>  int32  <p>EndPort marks the end of the port range to allow. If unspecified, only a single port, Port, will be allowed.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerSpec","title":"LoadBalancerSpec","text":"<p> (Appears on:LoadBalancer) </p> Field Description <code>type</code>  LoadBalancerType  <p>Type specifies the type of load balancer.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network the load balancer is part of.</p> <code>ips</code>  []LoadBalancerIP  (Optional) <p>IPs specifies the IPs of the load balancer.</p> <code>ports</code>  []LoadBalancerPort  <p>Ports are the ports the load balancer should allow. If empty, the load balancer allows all ports.</p> <code>selector</code>  Kubernetes meta/v1.LabelSelector  <p>Selector selects all Instance that are managed by this daemon set.</p> <code>template</code>  InstanceTemplate  <p>Template is the instance template.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerStatus","title":"LoadBalancerStatus","text":"<p> (Appears on:LoadBalancer) </p> Field Description <code>collisionCount</code>  int32  <p>CollisionCount is used to construct names for IP addresses for the load balancer.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerTargetRef","title":"LoadBalancerTargetRef","text":"<p> (Appears on:LoadBalancerDestination) </p> <p>LoadBalancerTargetRef is a load balancer target.</p> Field Description <code>uid</code>  k8s.io/apimachinery/pkg/types.UID  <p>UID is the UID of the target.</p> <code>name</code>  string  <p>Name is the name of the target.</p> <code>nodeRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NodeRef references the node the destination network interface is on.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LoadBalancerType","title":"LoadBalancerType (<code>string</code> alias)","text":"<p> (Appears on:InstanceSpec, LoadBalancerSpec) </p> Value Description <p>\"Internal\"</p> <p>\"Public\"</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.LocalUIDReference","title":"LocalUIDReference","text":"<p> (Appears on:NetworkPolicyRule, TargetNetworkInterface) </p> <p>LocalUIDReference is a reference to another entity including its UID</p> Field Description <code>name</code>  string  <p>Name is the name of the referenced entity.</p> <code>uid</code>  k8s.io/apimachinery/pkg/types.UID  <p>UID is the UID of the referenced entity.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATGatewayAutoscalerSpec","title":"NATGatewayAutoscalerSpec","text":"<p> (Appears on:NATGatewayAutoscaler) </p> Field Description <code>natGatewayRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NATGatewayRef points to the target NATGateway to scale.</p> <code>minPublicIPs</code>  int32  <p>MinPublicIPs is the minimum number of public IPs to allocate for a NAT Gateway.</p> <code>maxPublicIPs</code>  int32  <p>MaxPublicIPs is the maximum number of public IPs to allocate for a NAT Gateway.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATGatewayAutoscalerStatus","title":"NATGatewayAutoscalerStatus","text":"<p> (Appears on:NATGatewayAutoscaler) </p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATGatewayIP","title":"NATGatewayIP","text":"<p> (Appears on:NATGatewaySpec) </p> Field Description <code>name</code>  string  <p>Name is the semantic name of the NAT gateway IP.</p> <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IP specifies a specific IP to allocate. If empty, a random IP will be allocated if possible.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATGatewaySpec","title":"NATGatewaySpec","text":"<p> (Appears on:NATGateway) </p> Field Description <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <p>IPFamily is the IP family of the NAT gateway.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network the NAT gateway is part of.</p> <code>ips</code>  []NATGatewayIP  (Optional) <p>IPs specifies the IPs of the NAT gateway.</p> <code>portsPerNetworkInterface</code>  int32  <p>PortsPerNetworkInterface specifies how many ports to allocate per network interface.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATGatewayStatus","title":"NATGatewayStatus","text":"<p> (Appears on:NATGateway) </p> Field Description <code>usedNATIPs</code>  int64  <p>UsedNATIPs is the number of NAT IPs in-use.</p> <code>requestedNATIPs</code>  int64  <p>RequestedNATIPs is the number of requested NAT IPs.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATIP","title":"NATIP","text":"<p> (Appears on:NATTable) </p> Field Description <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IP is the IP to NAT.</p> <code>sections</code>  []NATIPSection  <p>Sections are the sections of the NATIP.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATIPSection","title":"NATIPSection","text":"<p> (Appears on:NATIP) </p> Field Description <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IP is the source IP.</p> <code>port</code>  int32  <p>Port is the start port of the section.</p> <code>endPort</code>  int32  <p>EndPort is the end port of the section</p> <code>targetRef</code>  NATTableIPTargetRef  <p>TargetRef references the entity having the IP.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NATTableIPTargetRef","title":"NATTableIPTargetRef","text":"<p> (Appears on:NATIPSection) </p> Field Description <code>uid</code>  k8s.io/apimachinery/pkg/types.UID  <p>UID is the UID of the target.</p> <code>name</code>  string  <p>Name is the name of the target.</p> <code>nodeRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NodeRef references the node the destination network interface is on.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkIDClaimRef","title":"NetworkIDClaimRef","text":"<p> (Appears on:NetworkIDSpec) </p> Field Description <code>group</code>  string  <code>resource</code>  string  <code>namespace</code>  string  <code>name</code>  string  <code>uid</code>  k8s.io/apimachinery/pkg/types.UID"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkIDSpec","title":"NetworkIDSpec","text":"<p> (Appears on:NetworkID) </p> Field Description <code>claimRef</code>  NetworkIDClaimRef"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkInterfaceNAT","title":"NetworkInterfaceNAT","text":"<p> (Appears on:NetworkInterfaceSpec) </p> Field Description <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <p>IPFamily is the IP family of the handling NAT gateway.</p> <code>claimRef</code>  NetworkInterfaceNATClaimRef  <p>ClaimRef references the NAT claim handling the network interface\u2019s NAT.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkInterfaceNATClaimRef","title":"NetworkInterfaceNATClaimRef","text":"<p> (Appears on:NetworkInterfaceNAT) </p> Field Description <code>name</code>  string  <p>Name is the name of the claiming NAT gateway.</p> <code>uid</code>  k8s.io/apimachinery/pkg/types.UID  <p>UID is the uid of the claiming NAT gateway.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkInterfacePublicIP","title":"NetworkInterfacePublicIP","text":"<p> (Appears on:NetworkInterfaceSpec) </p> Field Description <code>name</code>  string  <p>Name is the semantic name of the network interface public IP.</p> <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <p>IPFamily is the IP family of the IP. Has to match IP if specified. If unspecified and IP is specified, will be defaulted by using the IP family of IP. If only IPFamily is specified, a random IP of that family will be allocated if possible.</p> <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IP specifies a specific IP to allocate. If empty, a random ephemeral IP will be allocated.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkInterfaceSpec","title":"NetworkInterfaceSpec","text":"<p> (Appears on:NetworkInterface) </p> Field Description <code>nodeRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NodeRef is the node the network interface is hosted on.</p> <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef references the network that the network interface is in.</p> <code>ips</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IPs are the internal IPs of the network interface.</p> <code>prefixes</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IPPrefix  <p>Prefixes are additional prefixes to route to the network interface.</p> <code>natGateways</code>  []NetworkInterfaceNAT  <p>NATs specify the NAT of the network interface IP family. Can only be set if there is no matching IP family in PublicIPs.</p> <code>publicIPs</code>  []NetworkInterfacePublicIP  (Optional) <p>PublicIPs are the public IPs the network interface should have.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkInterfaceState","title":"NetworkInterfaceState (<code>string</code> alias)","text":"<p> (Appears on:NetworkInterfaceStatus) </p> Value Description <p>\"Error\"</p> <p>NetworkInterfaceStateError is used for any NetworkInterface that is some error occurred.</p> <p>\"Pending\"</p> <p>NetworkInterfaceStatePending is used for any NetworkInterface that is in an intermediate state.</p> <p>\"Ready\"</p> <p>NetworkInterfaceStateReady is used for any NetworkInterface that is ready.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkInterfaceStatus","title":"NetworkInterfaceStatus","text":"<p> (Appears on:NetworkInterface) </p> <p>NetworkInterfaceStatus defines the observed state of NetworkInterface.</p> Field Description <code>state</code>  NetworkInterfaceState  <p>State is the state of the network interface.</p> <code>pciAddress</code>  PCIAddress  <p>PCIAddress is the PCI address of the network interface.</p> <code>tapDevice</code>  TAPDevice  <p>TAPDevice is the TAP device of the network interface.</p> <code>prefixes</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IPPrefix  <p>Prefixes are the prefixes of the network interface.</p> <code>publicIPs</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>PublicIPs are the public IPs of the network interface.</p> <code>natIPs</code>  []github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>NATIPs are the NAT IPs of the network interface.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPeering","title":"NetworkPeering","text":"<p> (Appears on:NetworkSpec) </p> <p>NetworkPeering defines a network peering with another network.</p> Field Description <code>name</code>  string  <p>Name is the semantical name of the network peering.</p> <code>id</code>  string  <p>ID is the ID of the network to peer with.</p> <code>prefixes</code>  []PeeringPrefix  <p>Prefixes is a list of prefixes that we want only to be exposed to the peered network, if no prefixes are specified no filtering will be done.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPeeringState","title":"NetworkPeeringState (<code>string</code> alias)","text":"<p> (Appears on:NetworkPeeringStatus) </p> <p>NetworkPeeringState is the state a NetworkPeering can be in</p> Value Description <p>\"Error\"</p> <p>NetworkPeeringStateError signals that the network peering is in error state.</p> <p>\"Pending\"</p> <p>NetworkPeeringStatePending signals that the network peering is not applied.</p> <p>\"Ready\"</p> <p>NetworkPeeringStateReady signals that the network peering is ready.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPeeringStatus","title":"NetworkPeeringStatus","text":"<p>NetworkPeeringStatus is the status of a network peering.</p> Field Description <code>id</code>  int32  <p>ID is the ID of network</p> <code>state</code>  NetworkPeeringState  <p>State represents the network peering state</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPolicyEgressRule","title":"NetworkPolicyEgressRule","text":"<p> (Appears on:NetworkPolicySpec) </p> <p>NetworkPolicyEgressRule describes a rule to regulate egress traffic with.</p> Field Description <code>ports</code>  []NetworkPolicyPort  <p>Ports specifies the list of destination ports that can be called with this rule. Each item in this list is combined using a logical OR. Empty matches all ports. As soon as a single item is present, only these ports are allowed.</p> <code>to</code>  []NetworkPolicyPeer  <p>To specifies the list of destinations which the selected network interfaces should be able to send traffic to. Fields are combined using a logical OR. Empty matches all destinations. As soon as a single item is present, only these peers are allowed.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPolicyIngressRule","title":"NetworkPolicyIngressRule","text":"<p> (Appears on:NetworkPolicySpec) </p> <p>NetworkPolicyIngressRule describes a rule to regulate ingress traffic with.</p> Field Description <code>from</code>  []NetworkPolicyPeer  <p>From specifies the list of sources which should be able to send traffic to the selected network interfaces. Fields are combined using a logical OR. Empty matches all sources. As soon as a single item is present, only these peers are allowed.</p> <code>ports</code>  []NetworkPolicyPort  <p>Ports specifies the list of ports which should be made accessible for this rule. Each item in this list is combined using a logical OR. Empty matches all ports. As soon as a single item is present, only these ports are allowed.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPolicyPeer","title":"NetworkPolicyPeer","text":"<p> (Appears on:NetworkPolicyEgressRule, NetworkPolicyIngressRule) </p> <p>NetworkPolicyPeer describes a peer to allow traffic to / from.</p> Field Description <code>objectSelector</code>  ObjectSelector  <p>ObjectSelector selects peers with the given kind matching the label selector. Exclusive with other peer specifiers.</p> <code>ipBlock</code>  IPBlock  <p>IPBlock specifies the ip block from or to which network traffic may come.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPolicyPort","title":"NetworkPolicyPort","text":"<p> (Appears on:NetworkPolicyEgressRule, NetworkPolicyIngressRule, Rule) </p> <p>NetworkPolicyPort describes a port to allow traffic on</p> Field Description <code>protocol</code>  Kubernetes core/v1.Protocol  <p>Protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.</p> <code>port</code>  int32  <p>The port on the given protocol. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified protocol AND port will be matched.</p> <code>endPort</code>  int32  <p>EndPort indicates that the range of ports from Port to EndPort, inclusive, should be allowed by the policy. This field cannot be defined if the port field is not defined. The endPort must be equal or greater than port.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkPolicySpec","title":"NetworkPolicySpec","text":"<p> (Appears on:NetworkPolicy) </p> Field Description <code>networkRef</code>  Kubernetes core/v1.LocalObjectReference  <p>NetworkRef is the network to regulate using this policy.</p> <code>networkInterfaceSelector</code>  Kubernetes meta/v1.LabelSelector  <p>NetworkInterfaceSelector selects the network interfaces that are subject to this policy.</p> <code>priority</code>  int32  <p>Priority is an optional field that specifies the order in which the policy is applied. Policies with higher \u201corder\u201d are applied after those with lower order.  If the order is omitted, it may be considered to be \u201cinfinite\u201d - i.e. the policy will be applied last.  Policies with identical order will be applied in alphanumerical order based on the Policy \u201cName\u201d.</p> <code>ingress</code>  []NetworkPolicyIngressRule  <p>Ingress specifies rules for ingress traffic.</p> <code>egress</code>  []NetworkPolicyEgressRule  <p>Egress specifies rules for egress traffic.</p> <code>policyTypes</code>  []PolicyType  <p>PolicyTypes specifies the types of policies this network policy contains.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkSpec","title":"NetworkSpec","text":"<p> (Appears on:Network) </p> Field Description <code>id</code>  string  <p>ID is the ID of the network.</p> <code>peerings</code>  []NetworkPeering  <p>Peerings are the network peerings with this network</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkState","title":"NetworkState (<code>string</code> alias)","text":"<p>NetworkState is the state of a network.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NetworkStatus","title":"NetworkStatus","text":"<p> (Appears on:Network) </p> Field Description <code>peerings</code>  map[string][]./api/core/v1alpha1.NetworkPeeringStatus  <p>Peerings contains the states of the network peerings for the network.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NodeAffinity","title":"NodeAffinity","text":"<p> (Appears on:Affinity) </p> Field Description <code>requiredDuringSchedulingIgnoredDuringExecution</code>  NodeSelector"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NodeSelector","title":"NodeSelector","text":"<p> (Appears on:NodeAffinity) </p> <p>NodeSelector represents the union of the results of one or more queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.</p> Field Description <code>nodeSelectorTerms</code>  []NodeSelectorTerm  <p>Required. A list of node selector terms. The terms are ORed.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NodeSelectorOperator","title":"NodeSelectorOperator (<code>string</code> alias)","text":"<p> (Appears on:NodeSelectorRequirement) </p> <p>NodeSelectorOperator is the set of operators that can be used in a node selector requirement.</p> Value Description <p>\"DoesNotExist\"</p> <p>\"Exists\"</p> <p>\"Gt\"</p> <p>\"In\"</p> <p>\"Lt\"</p> <p>\"NotIn\"</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NodeSelectorRequirement","title":"NodeSelectorRequirement","text":"<p> (Appears on:NodeSelectorTerm) </p> <p>NodeSelectorRequirement is a requirement for a selector. It\u2019s a combination of the key to match, the operator to match with, and zero to n values, depending on the operator.</p> Field Description <code>key</code>  string  <p>Key is the key the selector applies to.</p> <code>operator</code>  NodeSelectorOperator  <p>Operator represents the key\u2019s relationship to the values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.</p> <code>values</code>  []string  <p>Values are the values to relate the key to via the operator.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NodeSelectorTerm","title":"NodeSelectorTerm","text":"<p> (Appears on:NodeSelector) </p> <p>NodeSelectorTerm matches no objects if it\u2019s empty. The requirements of the selector are ANDed.</p> Field Description <code>matchExpressions</code>  []NodeSelectorRequirement  <p>MatchExpressions matches nodes by the label selector requirements.</p> <code>matchFields</code>  []NodeSelectorRequirement  <p>MatchFields matches the nodes by their fields.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NodeSpec","title":"NodeSpec","text":"<p> (Appears on:Node) </p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.NodeStatus","title":"NodeStatus","text":"<p> (Appears on:Node) </p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.ObjectIP","title":"ObjectIP","text":"<p> (Appears on:Rule) </p> Field Description <code>ipFamily</code>  Kubernetes core/v1.IPFamily  <p>IPFamily is the IPFamily of the prefix. If unset but Prefix is set, this can be inferred.</p> <code>prefix</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IPPrefix  <p>Prefix is the prefix of the IP.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.ObjectSelector","title":"ObjectSelector","text":"<p> (Appears on:NetworkPolicyPeer) </p> <p>ObjectSelector specifies how to select objects of a certain kind.</p> Field Description <code>kind</code>  string  <p>Kind is the kind of object to select.</p> <code>LabelSelector</code>  Kubernetes meta/v1.LabelSelector  <p> (Members of <code>LabelSelector</code> are embedded into this type.) </p> <p>LabelSelector is the label selector to select objects of the specified Kind by.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.PCIAddress","title":"PCIAddress","text":"<p> (Appears on:NetworkInterfaceStatus) </p> <p>PCIAddress is a PCI address.</p> Field Description <code>domain</code>  string  <code>bus</code>  string  <code>slot</code>  string  <code>function</code>  string"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.PeeringPrefix","title":"PeeringPrefix","text":"<p> (Appears on:NetworkPeering) </p> <p>PeeringPrefix defines prefixes to be exposed to the peered network</p> Field Description <code>name</code>  string  <p>Name is the semantical name of the peering prefixes</p> <code>prefix</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IPPrefix  <p>CIDR to be exposed to the peered network</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.PolicyType","title":"PolicyType (<code>string</code> alias)","text":"<p> (Appears on:NetworkPolicySpec) </p> <p>PolicyType is a type of policy.</p> Value Description <p>\"Egress\"</p> <p>PolicyTypeEgress is a policy that describes egress traffic.</p> <p>\"Ingress\"</p> <p>PolicyTypeIngress is a policy that describes ingress traffic.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.Rule","title":"Rule","text":"<p> (Appears on:NetworkPolicyRule) </p> Field Description <code>ipBlock</code>  []IPBlock  <p>CIDRBlock specifies the CIDR block from which network traffic may come or go.</p> <code>ips</code>  []ObjectIP  <p>ObjectIPs are the object IPs the rule applies to.</p> <code>networkPolicyPorts</code>  []NetworkPolicyPort  <p>NetworkPolicyPorts are the protocol type and ports.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.TAPDevice","title":"TAPDevice","text":"<p> (Appears on:NetworkInterfaceStatus) </p> <p>TAPDevice is a TAP device.</p> Field Description <code>name</code>  string  <p>Name is the name of the TAP device.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.TargetNetworkInterface","title":"TargetNetworkInterface","text":"<p> (Appears on:NetworkPolicyRule) </p> <p>TargetNetworkInterface is the target of the network policy.</p> Field Description <code>ip</code>  github.com/ironcore-dev/ironcore-net/apimachinery/api/net.IP  <p>IP is the IP address of the target network interface.</p> <code>targetRef</code>  LocalUIDReference  <p>TargetRef is the target providing the destination.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.TopologySpreadConstraint","title":"TopologySpreadConstraint","text":"<p> (Appears on:InstanceSpec) </p> <p>TopologySpreadConstraint specifies how to spread matching instances among the given topology.</p> Field Description <code>maxSkew</code>  int32  <p>MaxSkew describes the degree to which instances may be unevenly distributed. When <code>whenUnsatisfiable=DoNotSchedule</code>, it is the maximum permitted difference between the number of matching instances in the target topology and the global minimum. The global minimum is the minimum number of matching instances in an eligible domain or zero if the number of eligible domains is less than MinDomains.</p> <code>topologyKey</code>  string  <p>TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each  as a \u201cbucket\u201d, and try to put balanced number of instances into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. <code>whenUnsatisfiable</code>  UnsatisfiableConstraintAction  <p>WhenUnsatisfiable indicates how to deal with a instance if it doesn\u2019t satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the instance in any location, but giving higher precedence to topologies that would help reduce the skew.</p> <code>labelSelector</code>  Kubernetes meta/v1.LabelSelector  <p>LabelSelector is used to find matching instances. Instances that match this label selector are counted to determine the number of instances in their corresponding topology domain.</p>"},{"location":"api-reference/core/#core.apinet.ironcore.dev/v1alpha1.UnsatisfiableConstraintAction","title":"UnsatisfiableConstraintAction (<code>string</code> alias)","text":"<p> (Appears on:TopologySpreadConstraint) </p> Value Description <p>\"DoNotSchedule\"</p> <p>DoNotSchedule instructs the scheduler not to schedule the instance when constraints are not satisfied.</p> <p> Generated with <code>gen-crd-api-reference-docs</code> </p>"},{"location":"concepts/","title":"Concepts","text":"<ul> <li>Objects describes the objects available in   <code>ironcore-net</code>.</li> <li><code>Network</code> lifecycle describes the lifecycle   of a <code>Network</code> object.</li> <li><code>IP</code> lifecycle describes the lifecycle   of an <code>IP</code> object.</li> <li><code>ironcore</code> integration describes how   <code>ironcore-net</code> can be integrated with <code>ironcore</code>.</li> </ul>"},{"location":"concepts/ip-lifecycle/","title":"IP lifecycle","text":"<p>An <code>IP</code> is a namespaced handle to a claimed IP address. All namespaced resources wanting an IP have to claim the corresponding <code>IP</code> object in order to use it.</p>"},{"location":"concepts/ip-lifecycle/#ip-management","title":"IP management","text":"<p>When creating an <code>IP</code>, a vacant IP address has to be allocated. This allocation is done via cluster-scoped <code>IPAddress</code> objects. An <code>IPAddress</code>es name is the IP it represents. As such, detecting whether an <code>IPAddress</code> is taken can be easily done by <code>Get</code>ting the <code>IPAddress</code> with the IP to check and inspecting the result: If the <code>IPAddress</code> is present, it means it's taken. Otherwise, at least during the time of inspection, the <code>IPAddress</code> is vacant and ready to be claimed.</p> <p>The <code>IPAddress</code> and <code>IP</code> are tied together in the <code>IP</code>'s store <code>BeforeCreate</code> hook using the <code>ipaddressallocator</code>.</p> <p>The <code>Allocator</code> tries to create <code>IPAddress</code>es with the <code>claimRef</code> pointing to the <code>IP</code> about to be created. It continues to do so until it either finds a vacant <code>IPAddress</code> (creation succeeds) or it times out after too many attempts fail (<code>AlreadyExists</code> errors).</p> <p>The valid public <code>IPAddress</code> prefixes can be configured using the <code>apiserver</code>s <code>public-prefix</code> flag.</p> <p>When deleting an <code>IP</code>, the corresponding <code>IPAddress</code> is cleaned up alongside the claiming <code>IP</code>.</p>"},{"location":"concepts/ip-lifecycle/#claiming-the-ip","title":"Claiming the IP","text":"<p>To claim an <code>IP</code>, claimer has to set the <code>spec.claimRef</code> of the <code>IP</code>. Once set, if the claimer wants to release it while it is present, the claimer has to actively delete the <code>spec.claimRef</code>.</p> <p>If a claimer does not exist anymore, the <code>IPGarbageCollector</code> will take care of releasing the <code>IP</code>.</p>"},{"location":"concepts/ip-lifecycle/#claiming-an-ip-for-apinet-objects","title":"Claiming an IP for <code>apinet</code> objects","text":"<p>For <code>apinet</code> objects (<code>NetworkInterface</code>, <code>NATGateway</code>, <code>LoadBalancer</code>), claiming <code>IP</code>s is simple: When creating the object, there usually are two 'modes' for acquiring an <code>IP</code>: Either only the <code>IPFamily</code> (if applicable) is specified, causing a dynamic <code>IP</code> object to be created and claimed, or the desired <code>IP</code> is specified, causing the <code>IP</code>s in the namespace to be searched for the <code>IP</code> in question and to be claimed if possible.</p> <p>For the <code>apinet</code> objects, this whole process is done directly during <code>Create</code> / <code>Update</code>. There is no eventual reconciliation of the IPs. This also means that if an <code>Update</code> causes an <code>IP</code> not to be used anymore, it will be released.</p> <p>Example network interface claiming a dynamic public IP:</p> <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: NetworkInterface\nmetadata:\n  namespace: default\n  name: my-public-nic\nspec:\n  networkRef:\n    name: my-network\n  nodeRef:\n    name: my-node\n  ips:\n  - 192.168.178.3\n  publicIPs:\n    - name: public-ip-1\n      ipFamily: IPv4\n</code></pre>"},{"location":"concepts/ironcore-integration/","title":"IronCore integration","text":"<p><code>ironcore-net</code> controls networking over multiple peers and intelligently manages functions. It can be operated and used independently of <code>ironcore</code>. The binding to <code>ironcore</code> is only realized via <code>apinetlet</code>.</p>"},{"location":"concepts/ironcore-integration/#mapped-objects-interaction","title":"Mapped objects / interaction","text":"<p>The <code>apinetlet</code> is a controller that has access to an <code>ironcore</code> enabled cluster and an <code>ironcore-net</code> enabled cluster. It maps objects of <code>ironcore</code>'s <code>networking</code> group to corresponding entities in <code>ironcore-net</code>, if possible.</p>"},{"location":"concepts/ironcore-integration/#network","title":"Network","text":"<p>When a <code>networking.ironcore.dev/Network</code> is created, a corresponding <code>core.apinet.ironcore.dev/Network</code> is created in the <code>apinet</code> cluster. The name of the <code>Network</code> in the <code>apinet</code> cluster is the <code>uid</code> of the <code>Network</code> in the <code>ironcore</code> cluster.</p> <p>Once created and with an allocated <code>ID</code>, the <code>ironcore</code> <code>Network</code> will be patched with the corresponding provider ID of the <code>apinet</code> <code>Network</code> and set to <code>state: Available</code>. The provider ID format &amp; parsing can be found in <code>provider.go</code>.</p> <p>If <code>ironcore</code> <code>Network</code> has peerings, then they will be translated and  patched into <code>apinet</code> <code>Network</code>. More details can be found here  <code>Network Peering</code></p>"},{"location":"concepts/ironcore-integration/#loadbalancer","title":"LoadBalancer","text":"<p>For a <code>networking.ironcore.dev/LoadBalancer</code> a corresponding <code>core.apinet.ironcore.dev/LoadBalancer</code> is created, also having the <code>uid</code> of the source object as its name.</p> <p>The <code>apinet</code> <code>LoadBalancer</code> is configured to have an IP per IP family if it's a <code>Public</code> load balancer. Otherwise, it simply uses the IPs specified via the <code>ironcore</code> <code>LoadBalancer</code>.</p> <p>For the routing targets, the <code>ironcore</code> <code>LoadBalancerRouting</code> is inspected and transformed into an <code>apinet</code> <code>LoadBalancerRouting</code>.</p> <p>For its instances, the <code>apinet</code> <code>LoadBalancer</code> is created with a <code>template</code> that specifies instance anti-affinity to ensure instances are distributed cross-zone.</p>"},{"location":"concepts/ironcore-integration/#networkpolicy","title":"NetworkPolicy","text":"<p>For a <code>networking.ironcore.dev/NetworkPolicy</code> a corresponding <code>core.apinet.ironcore.dev/NetworkPolicy</code> is created in the <code>apinet</code> cluster. The name of the <code>NetworkPolicy</code> in the <code>apinet</code> cluster is the <code>uid</code> of the <code>NetworkPolicy</code> in the <code>ironcore</code> cluster. The <code>NetworkPolicy</code> applies to <code>NetworkInterfaces</code> within a specific <code>Network</code>, filtered by the label specified in the <code>NetworkPolicy</code> spec.</p> <p>Based on the <code>PolicyTypes</code> (<code>egress</code> and/or <code>ingress</code>), rules can be specified to limit the traffic on the target object to and from various objects like <code>LoadBalancer</code>, <code>NetworkInterface</code> or <code>IPBlock</code> on certain <code>ports</code>.</p> <p>When a <code>NetworkPolicy</code> is applied, a <code>NetworkPolicyRule</code> object is created with the specified policy rules. <code>Metalnetlet</code> then reads the <code>NetworkPolicyRule</code> and enforces these policy (firewall) rules on the target <code>NetworkInterface</code>s.</p> <p>for example refer to NetworkPolicy object</p>"},{"location":"concepts/ironcore-integration/#natgateway","title":"NATGateway","text":"<p>For a <code>networking.ironcore.dev/NATGateway</code> a corresponding <code>core.apinet.ironcore.dev/NATGateway</code> is created, also having the <code>uid</code> of the source object as its name. Additionally, a <code>NATGatewayAutoscaler</code> is created, ensuring there are enough public IPs available.</p> <p>The <code>apinet</code> <code>NATGateway</code> will try to target all <code>NetworkInterface</code>s in its <code>Network</code> that share an <code>IPFamily</code> but don't have a public IP for that family and no other <code>NATGateway</code> claiming it.</p>"},{"location":"concepts/ironcore-integration/#networkinterface","title":"NetworkInterface","text":"<p>Since the location of an <code>apinet</code> <code>NetworkInterface</code> depends on an <code>apinet</code> <code>Node</code>, <code>apinetlet</code> can not create a mapping <code>apinet</code> <code>NetworkInterface</code> for an <code>ironcore</code> <code>NetworkInterface</code>. Instead, the <code>MachinePool</code> implementing entity is responsible of doing so.</p> <p>The desired flow here is for the <code>MachinePool</code> implementor to create an <code>apinet</code> <code>NetworkInterface</code> for each desired <code>ironcore</code> <code>NetworkInterface</code> a <code>Machine</code> specifies. Then, upon successful creation, the <code>MachinePool</code> implementor has to patch the <code>ironcore</code>'s <code>NetworkInterface</code> <code>spec.providerID</code> to the provider ID of the <code>apinet</code> <code>NetworkInterface</code> (again, see <code>provider.go</code> on how to obtain / format the provider ID correctly).</p> <p>Once the <code>providerID</code> of the <code>ironcore</code> <code>NetworkInterface</code> is set, <code>apinetlet</code> takes care reporting the status of the <code>ironcore</code> <code>NetworkInterface</code> by observing the matching <code>apinet</code> <code>NetworkInterface</code>. <code>apinetlet</code> then also applies requested <code>VirtualIP</code>s and <code>LoadBalancer</code> targets to the <code>apinet</code> <code>NetworkInterface</code>.</p>"},{"location":"concepts/network-lifecycle/","title":"Network lifecycle","text":""},{"location":"concepts/network-lifecycle/#id-management","title":"ID management","text":"<p>When creating a <code>Network</code>, a vacant network ID has to be allocated. This allocation is done via cluster-scoped <code>NetworkID</code> objects. A <code>NetworkID</code>s name is the ID it represents. As such, detecting whether a <code>NetworkID</code> is taken can be easily done by <code>Get</code>ting the <code>NetworkID</code> with the ID to check and inspecting the result: If the <code>NetworkID</code> is present, it means it's taken. Otherwise, at least during the time of inspection, the <code>NetworkID</code> is vacant and ready to be claimed.</p> <p>The <code>NetworkID</code> and <code>Network</code> are tied together in the <code>Network</code>'s store <code>BeforeCreate</code> hook using the <code>networkidallocator</code>.</p> <p>The <code>Allocator</code> tries to create <code>NetworkID</code>s with the <code>claimRef</code> pointing to the <code>Network</code> about to be created. It continues to do so until it either finds a vacant <code>NetworkID</code> (creation succeeds) or it times out after too many attempts fail (<code>AlreadyExists</code> errors).</p> <p>The valid <code>NetworkID</code> range can be configured using the <code>apiserver</code>s <code>min-vni</code> / <code>max-vni</code> flags.</p> <p>When deleting a <code>Network</code>, the corresponding <code>NetworkID</code> is cleaned up alongside the claiming <code>Network</code>.</p>"},{"location":"concepts/network-lifecycle/#network-peering","title":"Network Peering","text":"<p>When creating network peering both <code>ironcore</code> <code>Network</code>s has to specify matching,  <code>spec.peerings</code> referencing each other respectively. A <code>ironcore</code> <code>Network</code> can be peered with  multiple <code>network</code>s in any namespcae.</p> <p>The <code>apinetlet</code> <code>NetworkController</code> checks if there are any <code>peeringClaimRefs</code>  present in <code>ironcore</code> <code>Network</code>. If yes then get <code>ironcore-net</code> <code>Network</code>  using <code>UID</code> of <code>peeringClaimRef</code> and add <code>spec.ID</code> of that <code>ironcore-net</code> <code>Network</code>  along with corresponding peering name and peering prefixes into <code>spec.peerings</code>  of current <code>ironcore-net</code> <code>Network</code>.</p> <p>Once <code>ironcore-net</code> <code>Network</code> is updated with <code>spec.peerings</code>, <code>metalnetlet</code> <code>NetworkController</code>  updates <code>metalnet</code> <code>Network</code>'s <code>spec.peeredIDs</code> and <code>spec.peeredPrefixes</code>  from corresponding <code>ironcore-net</code> <code>Network</code> <code>spec.peerings</code></p> <p>The <code>metalnetlet</code> <code>NetworkController</code> also translates <code>status.peerings</code>  in <code>metalnet</code> <code>Network</code> to <code>ironcore-net</code> <code>Network</code>'s <code>status.peerings</code>.</p> <p>Then the <code>apinetlet</code> <code>NetworkController</code> also translates <code>status.peerings</code>  in <code>ironcore-net</code> <code>Network</code> to <code>ironcore</code> <code>Network</code>'s <code>status.peerings</code>.</p>"},{"location":"concepts/objects/","title":"Objects","text":"<p><code>ironcore-net</code> provides multiple objects to interact with. As <code>ironcore-net</code> is a Kubernetes-API, all objects are written in a declarative fashion, meaning that they represent the desired state and will be reconciled to eventually manifest that state in the real world.</p>"},{"location":"concepts/objects/#ip","title":"IP","text":"<p>An IP can be used to get a static hold of an IP. Currently, only public IPs can be obtained this way.</p> <p>Upon its creation, a public IP object gets assigned an available IP. When deleting the IP, the corresponding public IP is released again.</p> <p>Example manifest:</p> <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: IP\nmetadata:\n  namespace: default\n  name: my-public-ip\nspec:\n  type: Public\n  ip: 10.0.0.1 # This is allocated automatically.\n  # claimRef: # claimRef is set as soon as the IP is claimed.\n  #   name: my-nic\n</code></pre>"},{"location":"concepts/objects/#network","title":"Network","text":"<p>To set up a networking infrastructure, the primary object to create is a <code>Network</code>. A <code>Network</code> is an isolated networking domain. Communication within a <code>Network</code> happens on Layer 3 (no ethernet) via the IP protocol. Peers inside a <code>Network</code> can reach each other unless configured otherwise.</p> <p>Example manifest:</p> <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: Network\nmetadata:\n  namespace: default\n  name: my-network\n# spec:\n#   id: \"301\"\n</code></pre> <p>When creating a <code>Network</code>, its <code>spec.id</code> is automatically allocated.</p>"},{"location":"concepts/objects/#networkinterface","title":"NetworkInterface","text":"<p>A <code>NetworkInterface</code> is the 'default' peer inside a <code>Network</code>. To create a <code>NetworkInterface</code>, the target <code>Node</code> and primary internal IPs have to be known in advance. Once created, a <code>NetworkInterface</code> can also dynamically claim and release <code>publicIPs</code> and be target of a <code>NATGateway</code> (via <code>spec.natGateways</code>).</p> <p>There are two ways to use <code>publicIPs</code>: Either the public IP literal is specified upon creation, which causes the namespace of the <code>NetworkInterface</code> to be searched for the corresponding <code>IP</code> object to be claimed. If no literal is specified, a dynamic <code>IP</code> object will be created that will have a controller reference set to the <code>NetworkInterface</code>, causing it to be deleted when the <code>NetworkInterface</code> is deleted.</p> <p>Once picked up by the target <code>Node</code>, the network interface is created and reports its PCI address and state as part of its <code>status</code>.</p> <p>Example manifest:</p> <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: NetworkInterface\nmetadata:\n  namespace: default\n  name: my-nic\nspec:\n  networkRef:\n    name: my-network\n  nodeRef:\n    name: my-node\n  ips:\n  - 192.168.178.1\n  publicIPs:\n  - name: ip-1\n    ip: 10.0.0.1\nstatus:\n  pciAddress:\n    bus: \"06\"\n    domain: \"0000\"\n    function: \"3\"\n    slot: \"00\"\n  state: Ready\n</code></pre>"},{"location":"concepts/objects/#instance","title":"Instance","text":"<p>An <code>Instance</code> allows deploying dynamic network functions onto <code>Node</code>s inside the cluster. Currently, only <code>Instance</code>s of <code>type: LoadBalancer</code> are available.</p> <p>To create a load balancer <code>Instance</code>, the load balancer type, the IPs and the network has to be specified.</p> <p>If the <code>nodeRef</code> field is empty, the <code>scheduler</code> automatically determines a suitable <code>Node</code> for the <code>Instance</code> to run on. Scheduling of <code>Instance</code>s can be influenced by using <code>spec.affinity</code>, allowing for node-affinity and instance anti-affinity. This is especially useful while deploying loadbalancer instances, when there should only be a single instance per topology domain.</p> <p>Example manifest:</p> <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: Instance\nmetadata:\n  namespace: default\n  name: my-instance\nspec:\n  type: LoadBalancer\n  loadBalancerType: Public\n  networkRef:\n    name: my-network\n  ips:\n  - 10.0.0.2\n</code></pre>"},{"location":"concepts/objects/#loadbalancer","title":"LoadBalancer","text":"<p>A <code>LoadBalancer</code> manages its <code>Instance</code>s and declares its routing by its corresponding <code>LoadBalancerRouting</code>. Under the hood, a <code>LoadBalancer</code> creates a <code>DaemonSet</code> managing its <code>Instance</code>s. Currently, <code>Instance</code>s can contain multiple IPs, but the desired architecture is to have an <code>Instance</code> containing only a single IP. This will eventually make the management of multiple <code>DaemonSet</code>s per <code>LoadBalancer</code> a requirement.</p> <p>For now, everytime the IPs of a <code>LoadBalancer</code> are updated, all its <code>Instance</code>s are updated (done by the <code>DaemonSet</code> controller).</p> <p>Example manifest:</p> <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: LoadBalancer\nmetadata:\n  namespace: default\n  name: my-instance\nspec:\n  type: Public\n  networkRef:\n    name: my-network\n  ips:\n  - name: ip-1\n    ip: 10.0.0.2\n  template: {}\n</code></pre>"},{"location":"concepts/objects/#networkpolicy","title":"NetworkPolicy","text":"<p>A <code>NetworkPolicy</code> limits traffic to and from various objects like <code>NetworkInterfaces</code>, <code>LoadBalancers</code> etc. for the target objects within a specific network. </p> <p>When a <code>NetworkPolicy</code> is applied, a <code>NetworkPolicyRule</code> object is created to contain the policy rules specified in the <code>NetworkPolicy</code>. </p> <p>Then, <code>metalnetlet</code> translates these policy rules from the <code>NetworkPolicyRule</code> object and applies them to the <code>NetworkInterface</code>s.</p> <p>Example manifest <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: NetworkPolicy\nmetadata:\n  namespace: default\n  name: my-networkpolicy\nspec:\n  networkRef:\n    name: my-network\n  networkInterfaceSelector:\n    matchLabels:\n      app: db\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - ipBlock:\n        cidr: 172.17.0.0/16\n    - objectSelector:\n        kind: NetworkInterface\n        matchLabels:\n    - objectSelector:\n        kind: LoadBalancer\n        matchLabels:\n          app: web\n    ports:\n    - protocol: TCP\n      port: 5432\n  egress:\n  - to:\n    - ipBlock:\n        cidr: 10.0.0.0/24\n    ports:\n    - protocol: TCP\n      port: 8080\n</code></pre></p>"},{"location":"concepts/objects/#natgateway","title":"NATGateway","text":"<p>A <code>NATGateway</code> allows NAT-ing external IPs to multiple target <code>NetworkInterface</code>s inside a network. The NATed IPs are managed using a <code>NATTable</code> the <code>NATGateway</code> controller updates depending on the amount of target <code>NetworkInterface</code>s.</p> <p>A <code>NATGateway</code> always tries to claim all <code>NetworkInterface</code>s inside its network that don't have a public IP of the IP family the <code>NATGateway</code> has. The claim is depicted by the <code>NetworkInterface</code>'s <code>spec.natGateways</code>.</p> <p>Example manifest:</p> <pre><code>apiVersion: core.apinet.ironcore.dev/v1alpha1\nkind: NATGateway\nmetadata:\n  namespace: default\n  name: my-nat-gateway\nspec:\n  networkRef:\n    name: my-network\n  ipFamily: IPv4\n  ips:\n  - name: ip-1\n    ip: 10.0.0.3\n  portsPerNetworkInterface: 1024\n</code></pre>"},{"location":"development/setup/","title":"Local Development Setup","text":""},{"location":"development/setup/#requirements","title":"Requirements","text":"<ul> <li><code>go</code> &gt;= 1.20</li> <li><code>git</code>, <code>make</code> and <code>kubectl</code></li> <li>Kustomize</li> <li>Access to a Kubernetes cluster (Minikube, kind or a   real cluster)</li> </ul>"},{"location":"development/setup/#clone-the-repository","title":"Clone the Repository","text":"<p>To bring up and start locally the <code>ironcore-net</code> project for development purposes clone the repository.</p> <pre><code>git clone git@github.com:ironcore-dev/ironcore-net.git\ncd ironcore-net\n</code></pre>"},{"location":"development/setup/#install-cert-manager","title":"Install cert-manager","text":"<p>If there is no cert-manager present in the cluster it needs to be installed.</p> <pre><code>kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.14.2/cert-manager.yaml\n</code></pre>"},{"location":"development/setup/#setup-ironcore","title":"Setup <code>ironcore</code>","text":"<p>Reference: ironcore docs</p>"},{"location":"development/setup/#setup-ironcore-net-with-kind-cluster","title":"Setup <code>ironcore-net</code> with <code>kind</code> cluster","text":"<p>For local development with <code>kind</code>, a make target that builds and loads the apiserver/controller images and then applies the manifests is available via</p> <ol> <li>Build and apply ironcore-net apiserver and controller manager to the cluster</li> </ol> <pre><code>make kind-deploy\n</code></pre> <ol> <li>Build and apply apinetlet to the cluster</li> </ol> <pre><code>make kind-build-load-restart-apinetlet\nmake kind-apply-apinetlet\n</code></pre> <ol> <li>Build and apply metalnetlet to the cluster</li> </ol> <pre><code>make kind-build-load-restart-metalnetlet\nmake kind-apply-metalnetlet\n</code></pre>"},{"location":"development/setup/#cleanup-from-kind-cluster","title":"Cleanup from <code>kind</code> cluster","text":"<pre><code>make kind-delete\nmake kind-delete-apinetlet\nmake kind-delete-metalnetlet\n</code></pre>"}]}