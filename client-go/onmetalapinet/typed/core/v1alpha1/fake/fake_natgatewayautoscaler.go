/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/onmetal/onmetal-api-net/api/core/v1alpha1"
	corev1alpha1 "github.com/onmetal/onmetal-api-net/client-go/applyconfigurations/core/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNATGatewayAutoscalers implements NATGatewayAutoscalerInterface
type FakeNATGatewayAutoscalers struct {
	Fake *FakeCoreV1alpha1
	ns   string
}

var natgatewayautoscalersResource = v1alpha1.SchemeGroupVersion.WithResource("natgatewayautoscalers")

var natgatewayautoscalersKind = v1alpha1.SchemeGroupVersion.WithKind("NATGatewayAutoscaler")

// Get takes name of the nATGatewayAutoscaler, and returns the corresponding nATGatewayAutoscaler object, and an error if there is any.
func (c *FakeNATGatewayAutoscalers) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.NATGatewayAutoscaler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(natgatewayautoscalersResource, c.ns, name), &v1alpha1.NATGatewayAutoscaler{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayAutoscaler), err
}

// List takes label and field selectors, and returns the list of NATGatewayAutoscalers that match those selectors.
func (c *FakeNATGatewayAutoscalers) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.NATGatewayAutoscalerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(natgatewayautoscalersResource, natgatewayautoscalersKind, c.ns, opts), &v1alpha1.NATGatewayAutoscalerList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.NATGatewayAutoscalerList{ListMeta: obj.(*v1alpha1.NATGatewayAutoscalerList).ListMeta}
	for _, item := range obj.(*v1alpha1.NATGatewayAutoscalerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested nATGatewayAutoscalers.
func (c *FakeNATGatewayAutoscalers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(natgatewayautoscalersResource, c.ns, opts))

}

// Create takes the representation of a nATGatewayAutoscaler and creates it.  Returns the server's representation of the nATGatewayAutoscaler, and an error, if there is any.
func (c *FakeNATGatewayAutoscalers) Create(ctx context.Context, nATGatewayAutoscaler *v1alpha1.NATGatewayAutoscaler, opts v1.CreateOptions) (result *v1alpha1.NATGatewayAutoscaler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(natgatewayautoscalersResource, c.ns, nATGatewayAutoscaler), &v1alpha1.NATGatewayAutoscaler{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayAutoscaler), err
}

// Update takes the representation of a nATGatewayAutoscaler and updates it. Returns the server's representation of the nATGatewayAutoscaler, and an error, if there is any.
func (c *FakeNATGatewayAutoscalers) Update(ctx context.Context, nATGatewayAutoscaler *v1alpha1.NATGatewayAutoscaler, opts v1.UpdateOptions) (result *v1alpha1.NATGatewayAutoscaler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(natgatewayautoscalersResource, c.ns, nATGatewayAutoscaler), &v1alpha1.NATGatewayAutoscaler{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayAutoscaler), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNATGatewayAutoscalers) UpdateStatus(ctx context.Context, nATGatewayAutoscaler *v1alpha1.NATGatewayAutoscaler, opts v1.UpdateOptions) (*v1alpha1.NATGatewayAutoscaler, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(natgatewayautoscalersResource, "status", c.ns, nATGatewayAutoscaler), &v1alpha1.NATGatewayAutoscaler{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayAutoscaler), err
}

// Delete takes name of the nATGatewayAutoscaler and deletes it. Returns an error if one occurs.
func (c *FakeNATGatewayAutoscalers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(natgatewayautoscalersResource, c.ns, name, opts), &v1alpha1.NATGatewayAutoscaler{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNATGatewayAutoscalers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(natgatewayautoscalersResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.NATGatewayAutoscalerList{})
	return err
}

// Patch applies the patch and returns the patched nATGatewayAutoscaler.
func (c *FakeNATGatewayAutoscalers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.NATGatewayAutoscaler, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(natgatewayautoscalersResource, c.ns, name, pt, data, subresources...), &v1alpha1.NATGatewayAutoscaler{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayAutoscaler), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied nATGatewayAutoscaler.
func (c *FakeNATGatewayAutoscalers) Apply(ctx context.Context, nATGatewayAutoscaler *corev1alpha1.NATGatewayAutoscalerApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.NATGatewayAutoscaler, err error) {
	if nATGatewayAutoscaler == nil {
		return nil, fmt.Errorf("nATGatewayAutoscaler provided to Apply must not be nil")
	}
	data, err := json.Marshal(nATGatewayAutoscaler)
	if err != nil {
		return nil, err
	}
	name := nATGatewayAutoscaler.Name
	if name == nil {
		return nil, fmt.Errorf("nATGatewayAutoscaler.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(natgatewayautoscalersResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha1.NATGatewayAutoscaler{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayAutoscaler), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeNATGatewayAutoscalers) ApplyStatus(ctx context.Context, nATGatewayAutoscaler *corev1alpha1.NATGatewayAutoscalerApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.NATGatewayAutoscaler, err error) {
	if nATGatewayAutoscaler == nil {
		return nil, fmt.Errorf("nATGatewayAutoscaler provided to Apply must not be nil")
	}
	data, err := json.Marshal(nATGatewayAutoscaler)
	if err != nil {
		return nil, err
	}
	name := nATGatewayAutoscaler.Name
	if name == nil {
		return nil, fmt.Errorf("nATGatewayAutoscaler.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(natgatewayautoscalersResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1alpha1.NATGatewayAutoscaler{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NATGatewayAutoscaler), err
}
