// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	corev1alpha1 "github.com/ironcore-dev/ironcore-net/api/core/v1alpha1"
	applyconfigurationscorev1alpha1 "github.com/ironcore-dev/ironcore-net/client-go/applyconfigurations/core/v1alpha1"
	scheme "github.com/ironcore-dev/ironcore-net/client-go/ironcorenet/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// InstancesGetter has a method to return a InstanceInterface.
// A group's client should implement this interface.
type InstancesGetter interface {
	Instances(namespace string) InstanceInterface
}

// InstanceInterface has methods to work with Instance resources.
type InstanceInterface interface {
	Create(ctx context.Context, instance *corev1alpha1.Instance, opts v1.CreateOptions) (*corev1alpha1.Instance, error)
	Update(ctx context.Context, instance *corev1alpha1.Instance, opts v1.UpdateOptions) (*corev1alpha1.Instance, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, instance *corev1alpha1.Instance, opts v1.UpdateOptions) (*corev1alpha1.Instance, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*corev1alpha1.Instance, error)
	List(ctx context.Context, opts v1.ListOptions) (*corev1alpha1.InstanceList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *corev1alpha1.Instance, err error)
	Apply(ctx context.Context, instance *applyconfigurationscorev1alpha1.InstanceApplyConfiguration, opts v1.ApplyOptions) (result *corev1alpha1.Instance, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, instance *applyconfigurationscorev1alpha1.InstanceApplyConfiguration, opts v1.ApplyOptions) (result *corev1alpha1.Instance, err error)
	InstanceExpansion
}

// instances implements InstanceInterface
type instances struct {
	*gentype.ClientWithListAndApply[*corev1alpha1.Instance, *corev1alpha1.InstanceList, *applyconfigurationscorev1alpha1.InstanceApplyConfiguration]
}

// newInstances returns a Instances
func newInstances(c *CoreV1alpha1Client, namespace string) *instances {
	return &instances{
		gentype.NewClientWithListAndApply[*corev1alpha1.Instance, *corev1alpha1.InstanceList, *applyconfigurationscorev1alpha1.InstanceApplyConfiguration](
			"instances",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *corev1alpha1.Instance { return &corev1alpha1.Instance{} },
			func() *corev1alpha1.InstanceList { return &corev1alpha1.InstanceList{} },
		),
	}
}
