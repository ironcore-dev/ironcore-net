// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ironcore-dev/ironcore-net/api/core/v1alpha1"
	metav1 "github.com/ironcore-dev/ironcore-net/client-go/applyconfigurations/meta/v1"
	v1 "k8s.io/api/core/v1"
)

// LoadBalancerSpecApplyConfiguration represents an declarative configuration of the LoadBalancerSpec type for use
// with apply.
type LoadBalancerSpecApplyConfiguration struct {
	Type       *v1alpha1.LoadBalancerType              `json:"type,omitempty"`
	NetworkRef *v1.LocalObjectReference                `json:"networkRef,omitempty"`
	IPs        []LoadBalancerIPApplyConfiguration      `json:"ips,omitempty"`
	Ports      []LoadBalancerPortApplyConfiguration    `json:"ports,omitempty"`
	Selector   *metav1.LabelSelectorApplyConfiguration `json:"selector,omitempty"`
	Template   *InstanceTemplateApplyConfiguration     `json:"template,omitempty"`
}

// LoadBalancerSpecApplyConfiguration constructs an declarative configuration of the LoadBalancerSpec type for use with
// apply.
func LoadBalancerSpec() *LoadBalancerSpecApplyConfiguration {
	return &LoadBalancerSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *LoadBalancerSpecApplyConfiguration) WithType(value v1alpha1.LoadBalancerType) *LoadBalancerSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithNetworkRef sets the NetworkRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkRef field is set to the value of the last call.
func (b *LoadBalancerSpecApplyConfiguration) WithNetworkRef(value v1.LocalObjectReference) *LoadBalancerSpecApplyConfiguration {
	b.NetworkRef = &value
	return b
}

// WithIPs adds the given value to the IPs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPs field.
func (b *LoadBalancerSpecApplyConfiguration) WithIPs(values ...*LoadBalancerIPApplyConfiguration) *LoadBalancerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIPs")
		}
		b.IPs = append(b.IPs, *values[i])
	}
	return b
}

// WithPorts adds the given value to the Ports field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Ports field.
func (b *LoadBalancerSpecApplyConfiguration) WithPorts(values ...*LoadBalancerPortApplyConfiguration) *LoadBalancerSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPorts")
		}
		b.Ports = append(b.Ports, *values[i])
	}
	return b
}

// WithSelector sets the Selector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Selector field is set to the value of the last call.
func (b *LoadBalancerSpecApplyConfiguration) WithSelector(value *metav1.LabelSelectorApplyConfiguration) *LoadBalancerSpecApplyConfiguration {
	b.Selector = value
	return b
}

// WithTemplate sets the Template field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Template field is set to the value of the last call.
func (b *LoadBalancerSpecApplyConfiguration) WithTemplate(value *InstanceTemplateApplyConfiguration) *LoadBalancerSpecApplyConfiguration {
	b.Template = value
	return b
}
