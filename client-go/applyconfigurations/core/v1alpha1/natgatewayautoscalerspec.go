/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
)

// NATGatewayAutoscalerSpecApplyConfiguration represents an declarative configuration of the NATGatewayAutoscalerSpec type for use
// with apply.
type NATGatewayAutoscalerSpecApplyConfiguration struct {
	NATGatewayRef *v1.LocalObjectReference `json:"natGatewayRef,omitempty"`
	MinPublicIPs  *int32                   `json:"minPublicIPs,omitempty"`
	MaxPublicIPs  *int32                   `json:"maxPublicIPs,omitempty"`
}

// NATGatewayAutoscalerSpecApplyConfiguration constructs an declarative configuration of the NATGatewayAutoscalerSpec type for use with
// apply.
func NATGatewayAutoscalerSpec() *NATGatewayAutoscalerSpecApplyConfiguration {
	return &NATGatewayAutoscalerSpecApplyConfiguration{}
}

// WithNATGatewayRef sets the NATGatewayRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NATGatewayRef field is set to the value of the last call.
func (b *NATGatewayAutoscalerSpecApplyConfiguration) WithNATGatewayRef(value v1.LocalObjectReference) *NATGatewayAutoscalerSpecApplyConfiguration {
	b.NATGatewayRef = &value
	return b
}

// WithMinPublicIPs sets the MinPublicIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MinPublicIPs field is set to the value of the last call.
func (b *NATGatewayAutoscalerSpecApplyConfiguration) WithMinPublicIPs(value int32) *NATGatewayAutoscalerSpecApplyConfiguration {
	b.MinPublicIPs = &value
	return b
}

// WithMaxPublicIPs sets the MaxPublicIPs field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MaxPublicIPs field is set to the value of the last call.
func (b *NATGatewayAutoscalerSpecApplyConfiguration) WithMaxPublicIPs(value int32) *NATGatewayAutoscalerSpecApplyConfiguration {
	b.MaxPublicIPs = &value
	return b
}
