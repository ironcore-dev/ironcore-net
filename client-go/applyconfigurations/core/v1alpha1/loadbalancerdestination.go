/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	net "github.com/onmetal/onmetal-api-net/apimachinery/api/net"
)

// LoadBalancerDestinationApplyConfiguration represents an declarative configuration of the LoadBalancerDestination type for use
// with apply.
type LoadBalancerDestinationApplyConfiguration struct {
	IP        *net.IP                                  `json:"ip,omitempty"`
	TargetRef *LoadBalancerTargetRefApplyConfiguration `json:"targetRef,omitempty"`
}

// LoadBalancerDestinationApplyConfiguration constructs an declarative configuration of the LoadBalancerDestination type for use with
// apply.
func LoadBalancerDestination() *LoadBalancerDestinationApplyConfiguration {
	return &LoadBalancerDestinationApplyConfiguration{}
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *LoadBalancerDestinationApplyConfiguration) WithIP(value net.IP) *LoadBalancerDestinationApplyConfiguration {
	b.IP = &value
	return b
}

// WithTargetRef sets the TargetRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TargetRef field is set to the value of the last call.
func (b *LoadBalancerDestinationApplyConfiguration) WithTargetRef(value *LoadBalancerTargetRefApplyConfiguration) *LoadBalancerDestinationApplyConfiguration {
	b.TargetRef = value
	return b
}
