// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	corev1alpha1 "github.com/ironcore-dev/ironcore-net/api/core/v1alpha1"
	internal "github.com/ironcore-dev/ironcore-net/client-go/applyconfigurations/internal"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// NetworkPolicyRuleApplyConfiguration represents an declarative configuration of the NetworkPolicyRule type for use
// with apply.
type NetworkPolicyRuleApplyConfiguration struct {
	v1.TypeMetaApplyConfiguration    `json:",inline"`
	*v1.ObjectMetaApplyConfiguration `json:"metadata,omitempty"`
	NetworkRef                       *LocalUIDReferenceApplyConfiguration       `json:"networkRef,omitempty"`
	Targets                          []TargetNetworkInterfaceApplyConfiguration `json:"targets,omitempty"`
	Priority                         *int32                                     `json:"priority,omitempty"`
	IngressRules                     []RuleApplyConfiguration                   `json:"ingressRule,omitempty"`
	EgressRules                      []RuleApplyConfiguration                   `json:"egressRule,omitempty"`
}

// NetworkPolicyRule constructs an declarative configuration of the NetworkPolicyRule type for use with
// apply.
func NetworkPolicyRule(name, namespace string) *NetworkPolicyRuleApplyConfiguration {
	b := &NetworkPolicyRuleApplyConfiguration{}
	b.WithName(name)
	b.WithNamespace(namespace)
	b.WithKind("NetworkPolicyRule")
	b.WithAPIVersion("core.apinet.ironcore.dev/v1alpha1")
	return b
}

// ExtractNetworkPolicyRule extracts the applied configuration owned by fieldManager from
// networkPolicyRule. If no managedFields are found in networkPolicyRule for fieldManager, a
// NetworkPolicyRuleApplyConfiguration is returned with only the Name, Namespace (if applicable),
// APIVersion and Kind populated. It is possible that no managed fields were found for because other
// field managers have taken ownership of all the fields previously owned by fieldManager, or because
// the fieldManager never owned fields any fields.
// networkPolicyRule must be a unmodified NetworkPolicyRule API object that was retrieved from the Kubernetes API.
// ExtractNetworkPolicyRule provides a way to perform a extract/modify-in-place/apply workflow.
// Note that an extracted apply configuration will contain fewer fields than what the fieldManager previously
// applied if another fieldManager has updated or force applied any of the previously applied fields.
// Experimental!
func ExtractNetworkPolicyRule(networkPolicyRule *corev1alpha1.NetworkPolicyRule, fieldManager string) (*NetworkPolicyRuleApplyConfiguration, error) {
	return extractNetworkPolicyRule(networkPolicyRule, fieldManager, "")
}

// ExtractNetworkPolicyRuleStatus is the same as ExtractNetworkPolicyRule except
// that it extracts the status subresource applied configuration.
// Experimental!
func ExtractNetworkPolicyRuleStatus(networkPolicyRule *corev1alpha1.NetworkPolicyRule, fieldManager string) (*NetworkPolicyRuleApplyConfiguration, error) {
	return extractNetworkPolicyRule(networkPolicyRule, fieldManager, "status")
}

func extractNetworkPolicyRule(networkPolicyRule *corev1alpha1.NetworkPolicyRule, fieldManager string, subresource string) (*NetworkPolicyRuleApplyConfiguration, error) {
	b := &NetworkPolicyRuleApplyConfiguration{}
	err := managedfields.ExtractInto(networkPolicyRule, internal.Parser().Type("com.github.ironcore-dev.ironcore-net.api.core.v1alpha1.NetworkPolicyRule"), fieldManager, b, subresource)
	if err != nil {
		return nil, err
	}
	b.WithName(networkPolicyRule.Name)
	b.WithNamespace(networkPolicyRule.Namespace)

	b.WithKind("NetworkPolicyRule")
	b.WithAPIVersion("core.apinet.ironcore.dev/v1alpha1")
	return b, nil
}

// WithKind sets the Kind field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Kind field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithKind(value string) *NetworkPolicyRuleApplyConfiguration {
	b.Kind = &value
	return b
}

// WithAPIVersion sets the APIVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the APIVersion field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithAPIVersion(value string) *NetworkPolicyRuleApplyConfiguration {
	b.APIVersion = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithName(value string) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.Name = &value
	return b
}

// WithGenerateName sets the GenerateName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GenerateName field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithGenerateName(value string) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.GenerateName = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithNamespace(value string) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.Namespace = &value
	return b
}

// WithUID sets the UID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UID field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithUID(value types.UID) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.UID = &value
	return b
}

// WithResourceVersion sets the ResourceVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ResourceVersion field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithResourceVersion(value string) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.ResourceVersion = &value
	return b
}

// WithGeneration sets the Generation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Generation field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithGeneration(value int64) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.Generation = &value
	return b
}

// WithCreationTimestamp sets the CreationTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CreationTimestamp field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithCreationTimestamp(value metav1.Time) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.CreationTimestamp = &value
	return b
}

// WithDeletionTimestamp sets the DeletionTimestamp field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeletionTimestamp field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithDeletionTimestamp(value metav1.Time) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.DeletionTimestamp = &value
	return b
}

// WithDeletionGracePeriodSeconds sets the DeletionGracePeriodSeconds field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeletionGracePeriodSeconds field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithDeletionGracePeriodSeconds(value int64) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	b.DeletionGracePeriodSeconds = &value
	return b
}

// WithLabels puts the entries into the Labels field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Labels field,
// overwriting an existing map entries in Labels field with the same key.
func (b *NetworkPolicyRuleApplyConfiguration) WithLabels(entries map[string]string) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	if b.Labels == nil && len(entries) > 0 {
		b.Labels = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Labels[k] = v
	}
	return b
}

// WithAnnotations puts the entries into the Annotations field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Annotations field,
// overwriting an existing map entries in Annotations field with the same key.
func (b *NetworkPolicyRuleApplyConfiguration) WithAnnotations(entries map[string]string) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	if b.Annotations == nil && len(entries) > 0 {
		b.Annotations = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Annotations[k] = v
	}
	return b
}

// WithOwnerReferences adds the given value to the OwnerReferences field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OwnerReferences field.
func (b *NetworkPolicyRuleApplyConfiguration) WithOwnerReferences(values ...*v1.OwnerReferenceApplyConfiguration) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOwnerReferences")
		}
		b.OwnerReferences = append(b.OwnerReferences, *values[i])
	}
	return b
}

// WithFinalizers adds the given value to the Finalizers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Finalizers field.
func (b *NetworkPolicyRuleApplyConfiguration) WithFinalizers(values ...string) *NetworkPolicyRuleApplyConfiguration {
	b.ensureObjectMetaApplyConfigurationExists()
	for i := range values {
		b.Finalizers = append(b.Finalizers, values[i])
	}
	return b
}

func (b *NetworkPolicyRuleApplyConfiguration) ensureObjectMetaApplyConfigurationExists() {
	if b.ObjectMetaApplyConfiguration == nil {
		b.ObjectMetaApplyConfiguration = &v1.ObjectMetaApplyConfiguration{}
	}
}

// WithNetworkRef sets the NetworkRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NetworkRef field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithNetworkRef(value *LocalUIDReferenceApplyConfiguration) *NetworkPolicyRuleApplyConfiguration {
	b.NetworkRef = value
	return b
}

// WithTargets adds the given value to the Targets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Targets field.
func (b *NetworkPolicyRuleApplyConfiguration) WithTargets(values ...*TargetNetworkInterfaceApplyConfiguration) *NetworkPolicyRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargets")
		}
		b.Targets = append(b.Targets, *values[i])
	}
	return b
}

// WithPriority sets the Priority field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Priority field is set to the value of the last call.
func (b *NetworkPolicyRuleApplyConfiguration) WithPriority(value int32) *NetworkPolicyRuleApplyConfiguration {
	b.Priority = &value
	return b
}

// WithIngressRules adds the given value to the IngressRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IngressRules field.
func (b *NetworkPolicyRuleApplyConfiguration) WithIngressRules(values ...*RuleApplyConfiguration) *NetworkPolicyRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIngressRules")
		}
		b.IngressRules = append(b.IngressRules, *values[i])
	}
	return b
}

// WithEgressRules adds the given value to the EgressRules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the EgressRules field.
func (b *NetworkPolicyRuleApplyConfiguration) WithEgressRules(values ...*RuleApplyConfiguration) *NetworkPolicyRuleApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithEgressRules")
		}
		b.EgressRules = append(b.EgressRules, *values[i])
	}
	return b
}
