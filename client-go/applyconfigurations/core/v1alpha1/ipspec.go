/*
 * Copyright (c) 2022 by the OnMetal authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/onmetal/onmetal-api-net/api/core/v1alpha1"
	net "github.com/onmetal/onmetal-api-net/apimachinery/api/net"
	v1 "k8s.io/api/core/v1"
)

// IPSpecApplyConfiguration represents an declarative configuration of the IPSpec type for use
// with apply.
type IPSpecApplyConfiguration struct {
	Type     *v1alpha1.IPType              `json:"type,omitempty"`
	IPFamily *v1.IPFamily                  `json:"ipFamily,omitempty"`
	IP       *net.IP                       `json:"ip,omitempty"`
	ClaimRef *IPClaimRefApplyConfiguration `json:"claimRef,omitempty"`
}

// IPSpecApplyConfiguration constructs an declarative configuration of the IPSpec type for use with
// apply.
func IPSpec() *IPSpecApplyConfiguration {
	return &IPSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithType(value v1alpha1.IPType) *IPSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithIPFamily sets the IPFamily field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPFamily field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithIPFamily(value v1.IPFamily) *IPSpecApplyConfiguration {
	b.IPFamily = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithIP(value net.IP) *IPSpecApplyConfiguration {
	b.IP = &value
	return b
}

// WithClaimRef sets the ClaimRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClaimRef field is set to the value of the last call.
func (b *IPSpecApplyConfiguration) WithClaimRef(value *IPClaimRefApplyConfiguration) *IPSpecApplyConfiguration {
	b.ClaimRef = value
	return b
}
