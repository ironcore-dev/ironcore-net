// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	net "github.com/ironcore-dev/ironcore-net/apimachinery/api/net"
)

// NATIPApplyConfiguration represents an declarative configuration of the NATIP type for use
// with apply.
type NATIPApplyConfiguration struct {
	IP       *net.IP                          `json:"ip,omitempty"`
	Sections []NATIPSectionApplyConfiguration `json:"sections,omitempty"`
}

// NATIPApplyConfiguration constructs an declarative configuration of the NATIP type for use with
// apply.
func NATIP() *NATIPApplyConfiguration {
	return &NATIPApplyConfiguration{}
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *NATIPApplyConfiguration) WithIP(value net.IP) *NATIPApplyConfiguration {
	b.IP = &value
	return b
}

// WithSections adds the given value to the Sections field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Sections field.
func (b *NATIPApplyConfiguration) WithSections(values ...*NATIPSectionApplyConfiguration) *NATIPApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSections")
		}
		b.Sections = append(b.Sections, *values[i])
	}
	return b
}
