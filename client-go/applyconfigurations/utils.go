// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1alpha1 "github.com/ironcore-dev/ironcore-net/api/core/v1alpha1"
	corev1alpha1 "github.com/ironcore-dev/ironcore-net/client-go/applyconfigurations/core/v1alpha1"
	metav1 "github.com/ironcore-dev/ironcore-net/client-go/applyconfigurations/meta/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=core.apinet.ironcore.dev, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("Affinity"):
		return &corev1alpha1.AffinityApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DaemonSet"):
		return &corev1alpha1.DaemonSetApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DaemonSetSpec"):
		return &corev1alpha1.DaemonSetSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DaemonSetStatus"):
		return &corev1alpha1.DaemonSetStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Instance"):
		return &corev1alpha1.InstanceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InstanceAffinityTerm"):
		return &corev1alpha1.InstanceAffinityTermApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InstanceAntiAffinity"):
		return &corev1alpha1.InstanceAntiAffinityApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InstanceSpec"):
		return &corev1alpha1.InstanceSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InstanceStatus"):
		return &corev1alpha1.InstanceStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("InstanceTemplate"):
		return &corev1alpha1.InstanceTemplateApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IP"):
		return &corev1alpha1.IPApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IPAddress"):
		return &corev1alpha1.IPAddressApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IPAddressClaimRef"):
		return &corev1alpha1.IPAddressClaimRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IPAddressSpec"):
		return &corev1alpha1.IPAddressSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IPClaimRef"):
		return &corev1alpha1.IPClaimRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("IPSpec"):
		return &corev1alpha1.IPSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancer"):
		return &corev1alpha1.LoadBalancerApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancerDestination"):
		return &corev1alpha1.LoadBalancerDestinationApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancerIP"):
		return &corev1alpha1.LoadBalancerIPApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancerPort"):
		return &corev1alpha1.LoadBalancerPortApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancerRouting"):
		return &corev1alpha1.LoadBalancerRoutingApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancerSpec"):
		return &corev1alpha1.LoadBalancerSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancerStatus"):
		return &corev1alpha1.LoadBalancerStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("LoadBalancerTargetRef"):
		return &corev1alpha1.LoadBalancerTargetRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATGateway"):
		return &corev1alpha1.NATGatewayApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATGatewayAutoscaler"):
		return &corev1alpha1.NATGatewayAutoscalerApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATGatewayAutoscalerSpec"):
		return &corev1alpha1.NATGatewayAutoscalerSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATGatewayIP"):
		return &corev1alpha1.NATGatewayIPApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATGatewaySpec"):
		return &corev1alpha1.NATGatewaySpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATGatewayStatus"):
		return &corev1alpha1.NATGatewayStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATIP"):
		return &corev1alpha1.NATIPApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATIPSection"):
		return &corev1alpha1.NATIPSectionApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATTable"):
		return &corev1alpha1.NATTableApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NATTableIPTargetRef"):
		return &corev1alpha1.NATTableIPTargetRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Network"):
		return &corev1alpha1.NetworkApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkID"):
		return &corev1alpha1.NetworkIDApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkIDClaimRef"):
		return &corev1alpha1.NetworkIDClaimRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkIDSpec"):
		return &corev1alpha1.NetworkIDSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkInterface"):
		return &corev1alpha1.NetworkInterfaceApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkInterfaceNAT"):
		return &corev1alpha1.NetworkInterfaceNATApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkInterfaceNATClaimRef"):
		return &corev1alpha1.NetworkInterfaceNATClaimRefApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkInterfacePublicIP"):
		return &corev1alpha1.NetworkInterfacePublicIPApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkInterfaceSpec"):
		return &corev1alpha1.NetworkInterfaceSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkInterfaceStatus"):
		return &corev1alpha1.NetworkInterfaceStatusApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NetworkSpec"):
		return &corev1alpha1.NetworkSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("Node"):
		return &corev1alpha1.NodeApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeAffinity"):
		return &corev1alpha1.NodeAffinityApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeSelector"):
		return &corev1alpha1.NodeSelectorApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeSelectorRequirement"):
		return &corev1alpha1.NodeSelectorRequirementApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("NodeSelectorTerm"):
		return &corev1alpha1.NodeSelectorTermApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("PCIAddress"):
		return &corev1alpha1.PCIAddressApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("TopologySpreadConstraint"):
		return &corev1alpha1.TopologySpreadConstraintApplyConfiguration{}

		// Group=meta.k8s.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("LabelSelector"):
		return &metav1.LabelSelectorApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("LabelSelectorRequirement"):
		return &metav1.LabelSelectorRequirementApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ManagedFieldsEntry"):
		return &metav1.ManagedFieldsEntryApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ObjectMeta"):
		return &metav1.ObjectMetaApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("OwnerReference"):
		return &metav1.OwnerReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TypeMeta"):
		return &metav1.TypeMetaApplyConfiguration{}

	}
	return nil
}
